@startuml
package model.entities {
  class Pokemon {
    - name: String
    - element: String
    - hp: int
    - attack: int
    + getName(): String
    + getElement(): String
    + getHp(): int
    + attack(int i, Pokemon pokemon, Pokemon enemyPokemon): void
    + rest(): void
    + getAttack(): int
    + setDefaultHp(): void
    + cityPokemonHeal(int i): void
  }
  class WildPokemons extends Pokemon {
    + cityPokemonHeal(): void
  }
  class Player {
    - name: String
    - pokemons: List<Pokemon>
    - moneyAmount: int
    - currentCity: String
    + getMoneyAmount(): int
    + getCurrentCity(): String
    + changeCurrentCity(String newCity): void
    + winBattleMoney(): void
    + buyPokemonMoneyLose(int price): void
    + addPokemon(Pokemon pokemon): void
    + getPokemons(): List<Pokemon>
    + removePokemon(Pokemon pokemon): void
    + cityPokemonHeal(): void
    + getName(): String
  }
  class AllPokemons{
    + starters: List<Pokemon>
    - wildPokemons: List<WildPokemons>
    + storePokemons: List<StorePokemon>
    + getWildPokemons(): List<WildPokemons>
    + getStorePokemons(): List<StorePokemon>
    + getStarter(int index): Pokemon
  }
  class StorePokemon extends Pokemon{
    - price
    + getPrice(): int

  }
}

package model.world {
  class City {
    - name: String
    + getName(): String
  }
}

package model.game {
  class WildPokemonRandomChoice {
    - player: Player
    - currentCity: City
    + start(): void
    + isGameOver(): boolean
  }
  enum BattleAction{
  + HEAL
  + FIGHT
  }

  enum CityAction{
  + HEAL
  + FIGHT
  + BUY_POKEMON
  }

}


package view {
  class ConsoleUI {
    + startGame(): Player
    + cityMenu(String city): CityAction
    + battleInfo(WildPokemons wildPokemons, Player currentPlayer): Pokemon
    + battleInterface(WildPokemons  wildPokemons, Pokemon currentPokemon): BattleAction
    + notifyAttackSelf(int attackValue): void
    + notifyRestSelf(): void
    + notifyAttackOpponent(int attackValue): void
    + notifyCatch(String pokemonName): void
    + notifyLosePokemon(Pokemon pokemon): void
    + notifyRestOpponent(): void
    + opponentTurn(): void
    + notifyCityHeal(): void
    + getStoreMenu(): StorePokemon
    + notifyBuyPokemon(String pokemonName): void
    + notifyNoBuyPokemon(String pokemonName): void
    + displayMoneyAmount(Player currentPlayer): void
    + notifyWin(): void
    + notifyLose(): void
  }
}

package controller {
  class GameController {
    + run(): void
  }
}

package utils {
  class RandomGenerator {
    + getRandomInt(min: int, max: int): int
  }
}

package app{
class Main{
}
}

Main --> GameController

WildPokemonRandomChoice --> RandomGenerator

ConsoleUI --> Player
ConsoleUI --> CityAction
ConsoleUI --> BattleAction
GameController --> AllPokemons

Player --> Pokemon

ConsoleUI ..> City

GameController --> ConsoleUI


AllPokemons --> Pokemon
@enduml